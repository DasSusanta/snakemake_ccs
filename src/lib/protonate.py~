# 2020-11-15

# Kiyoto Aramis Tanemura

# Protonate an ASE Atoms object. Assumes the read molecule is neutral to begin. Must modify if a charged molecules is employed
 
import numpy as np
from ase import Atom
from ase.visualize import view
from ase.geometry.analysis import Analysis
from ase.optimize import LBFGS
from ase.calculators.mopac import MOPAC
from ase.constraints import FixAtoms

def get_adjacency_matrix(ase_atoms):
    '''Obtain the bond adjacency matrix from ASE Atoms objects. Format to symmetric n x n matrix with no self-loops'''
    ana = Analysis(ase_atoms)
    A = ana.adjacency_matrix[0].A
    A += A.T
    A[range(len(ase_atoms)), range(len(ase_atoms))] = 0
    return A

def protonation_sites(ase_atoms, adjacencyMatrix):
    '''Given an ASE structure, return indices of possible protonation sites as a list of ints'''
    protonation_sites = [x for x in range(len(ase_atoms)) if ase_atoms.symbols[x] in ['O', 'N', 'F', 'Cl', 'S']]
    carbons = [x for x in range(len(ase_atoms)) if ase_atoms.symbols[x] == 'C']
    carbon_valencies = adjacencyMatrix[:, carbons].sum(axis = 0)
    unsaturated_c = [carbons[x] for x in range(len(carbons)) if carbon_valencies[x] < 4]
    protonation_sites += unsaturated_c
    return protonation_sites

def protonation_coords(ase_atoms):
    '''Return coordinates to add protons to hypothesize each protonation state.
    Output: list of [1, 3] array'''
    proton_coordinates = []
    A = get_adjacency_matrix(ase_atoms)
    protonationSites = protonation_sites(ase_atoms, A)
    for theSite in protonationSites:
        neighbors = A[theSite, :]
        neighbors = [x for x in range(len(ase_atoms)) if neighbors[x] == 1]
        neighbor_mean = np.mean(ase_atoms.positions[neighbors,:], axis = 0)
        diff_vector = neighbor_mean - ase_atoms.positions[theSite,:]
        if np.sum(diff_vector ** 2) < 0.25:
            a = ase_atoms.positions[neighbors[0],:] - ase_atoms.positions[theSite,:]
            b = ase_atoms.positions[neighbors[1],:] - ase_atoms.positions[theSite,:]
            aXb = np.cross(a, b)
            coord = ase_atoms.positions[theSite,:] + aXb
        else:
            coord = ase_atoms.positions[theSite,:] - diff_vector
        proton_coordinates.append(coord)
    return proton_coordinates

def protonate_structures(ase_atoms):
    '''Return list of hypothesized protonated structures'''
    proton_coordinates = protonation_coords(ase_atoms)
    num_atoms = len(proton_coordinates)
    protonation_states = [ase_atoms.copy() for x in range(len(proton_coordinates))]
    for i in range(len(proton_coordinates)):
        # Modified 2021-04-07 by KAT. Fix main atoms in place so that geometry optimization 
        # incluences the proton's position only, not the topology of the molecule
        # Implemented to avoid fragmenting the molecule.
        protonation_states[i].set_constraint(FixAtoms(indices=range(num_atoms)))
        protonation_states[i].append(Atom('H', position = proton_coordinates[i], charge = 1.0))
    return protonation_states

def optimize_structures(list_ase_atoms, charge, label = 'mopac'):
    '''Optimize each ASE Atoms using PM3/COSMO. Pass list of ASE Atoms object
    Returns Three lists: list_ase_atoms-optimized structures,
    energies-optimization energy (Hf + Gsolv)
    readErr-indices for which an optimized structure could not be read'''

    energies = []
    readErr = []

    for thestate in list_ase_atoms:
        # Modified 2020-11-18 by KAT. Switch from MOPAC's optimizer to ASE.
        thestate.set_calculator(MOPAC(label = label + 'mopac', charge = charge, method='PM3', NSPA=60, EPS=78.4))
        dyn = LBFGS(thestate)
        dyn.run(steps=1000)
#        thestate.set_calculator(MOPAC(task = 'LBFGS', charge = charge,
#                                  method='PM3', NSPA=60, EPS=78.4))
        energies.append(thestate.get_potential_energy())
    return list_ase_atoms, energies

def retrieve_min_E_state(list_ase_atoms, energies, readErr, charge, return_index = False):
    '''Find ASE Atoms object which returned the minimum energy'''
    minindex = np.argmin(energies)
    minEstate = list_ase_atoms[np.argmin(energies)]
    if return_index:
        return minEstate, minindex
    return minEstate

def contains_protonation_site(rdkit_mol):
    '''Given a RDKit molecule, return a Boolean whether or not it contains a possible protonation site'''
    elements = set(x.GetSymbol() for x in rdkit_mol.GetAtoms())
    if len(elements.intersection({'O', 'N', 'F', 'Cl', 'S'})):
        return True
    bondstypes = set(bond.GetBondTypeAsDouble() for bond in rdkit_mol.GetBonds())
    if len(bondstypes) > 1:
        return True
    return False
    
